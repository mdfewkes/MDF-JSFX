desc:MIDI Scale Map
author: Michael Fewkes
version: 0.9.1
changelog: Initial release
about: Map Midi notes to scale on a grid

in_pin:none
out_pin:none

slider1:0<0,11,1>-C
slider2:1<0,11,1>-#b
slider3:2<0,11,1>-D
slider4:3<0,11,1>-#b
slider5:4<0,11,1>-E
slider6:5<0,11,1>-F
slider7:6<0,11,1>-#b
slider8:7<0,11,1>-G
slider9:8<0,11,1>-#b
slider10:9<0,11,1>-A
slider11:10<0,11,1>-#b
slider12:11<0,11,1>-B

@init
ext_noinit = 1;
stepsInOctave = 12;

noteOffset = 12;
i = 0;
j = 0;
while (i < stepsInOctave) (
	noteOffset[i] = i;
	i += 1;
);

function UpdateOffset() (
	slider1 = noteOffset[0];
	slider2 = noteOffset[1];
	slider3 = noteOffset[2];
	slider4 = noteOffset[3];
	slider5 = noteOffset[4];
	slider6 = noteOffset[5];
	slider7 = noteOffset[6];
	slider8 = noteOffset[7];
	slider9 = noteOffset[8];
	slider10 = noteOffset[9];
	slider11 = noteOffset[10];
	slider12 = noteOffset[11];
	sliderchange(slider1);
	sliderchange(slider2);
	sliderchange(slider3);
	sliderchange(slider4);
	sliderchange(slider5);
	sliderchange(slider6);
	sliderchange(slider7);
	sliderchange(slider8);
	sliderchange(slider9);
	sliderchange(slider10);
	sliderchange(slider11);
	sliderchange(slider12);
	
);

function FindNewNote(currentNote) (
	index = currentNote%stepsInOctave;
	outputOffset = noteOffset[index] - index;
	(outputOffset > stepsInOctave/2) ? (
		outputOffset -= stepsInOctave;
	) : (outputOffset < -stepsInOctave/2) ? (
		outputOffset += stepsInOctave;
	);
	currentNote + outputOffset;
);

str = "";
noteNameReferance = 0;
noteNameReferance[0] = "C";
noteNameReferance[1] = "#b";
noteNameReferance[2] = "D";
noteNameReferance[3] = "#b";
noteNameReferance[4] = "E";
noteNameReferance[5] = "F";
noteNameReferance[6] = "#b";
noteNameReferance[7] = "G";
noteNameReferance[8] = "#b";
noteNameReferance[9] = "A";
noteNameReferance[10] = "#b";
noteNameReferance[11] = "B";
function NumberToName(noteNumber) (
	noteNameReferance[noteNumber];
);


@slider
noteOffset[0] = slider1;
noteOffset[1] = slider2;
noteOffset[2] = slider3;
noteOffset[3] = slider4;
noteOffset[4] = slider5;
noteOffset[5] = slider6;
noteOffset[6] = slider7;
noteOffset[7] = slider8;
noteOffset[8] = slider9;
noteOffset[9] = slider10;
noteOffset[10] = slider11;
noteOffset[11] = slider12;


@block

while (midirecv(offset,msg1,msg2,msg3)) ( // REAPER 4.59+ syntax while()
	(msg1 & $xF0)==$x90 || (msg1 & $xF0)==$x80 ? (
		n = FindNewNote(msg2);
		midisend(offset,msg1,n,msg3);
	) : (
		midisend(offset,msg1,msg2,msg3); // passthrough other events
	)
);


@gfx 600 600
divSize_w = gfx_w / (stepsInOctave + 3);
divSize_h = gfx_h / (stepsInOctave + 3);

x = divSize_w; //draw map
y = gfx_h - divSize_h;
i = 0;
j = 0;
while (i < stepsInOctave) (
	while (j < stepsInOctave) (
		(j == noteOffset[i]) ? ( //for current offset
			gfx_r = .75;
			gfx_g = .5;
			gfx_b = .5;
		) : (i == j) ? (         //for no offset
			gfx_r = .5;
			gfx_g = .5;
			gfx_b = .5;
		) : (                   //for remaining
			gfx_r = .75;
			gfx_g = .75;
			gfx_b = .75;
		);
		gfx_rect(x, y - divSize_h, divSize_w, divSize_h);
		y -= divSize_h;
		j += 1;
	);
	y = gfx_h - divSize_h;
	j = 0;
	x += divSize_w;
	i += 1;
);

x = divSize_w; //draw lables
y = divSize_h + (divSize_h - divSize_w) ;
gfx_setfont(1, "Arial", divSize_w);
gfx_r = 1;
gfx_g = 1;
gfx_b = 1;
i = 0;
while (i < stepsInOctave) ( //top
	gfx_x = x;
	gfx_y = y;     
	gfx_drawstr(NumberToName(i));
	
	x += divSize_w;
	i += 1;
);
x = gfx_w - divSize_w*2;
y = gfx_h - divSize_h*2;
gfx_setfont(1, "Arial", divSize_h);
i = 0;
while (i < stepsInOctave) ( //side
	gfx_x = x;
	gfx_y = y;
	gfx_drawstr(NumberToName(i));
	
	y -= divSize_h;
	i += 1;
);

col = -1;
row = -1;
click = -1;
(mouse_cap == 1) ? (
	((mouse_x > divSize_w) && (mouse_x < gfx_w - divSize_w*2)) ? (
		col = floor((mouse_x - divSize_w)/divSize_w);
		click += 1;
	);
	((mouse_y > divSize_h*2 ) && (mouse_y < gfx_h - divSize_h)) ? (
		row = abs(ceil((mouse_y - divSize_h*2)/divSize_h) - stepsInOctave);
		click += 1;
	);
);
(click == 1) ? (
	noteOffset[col] = row;
	UpdateOffset()
);


















